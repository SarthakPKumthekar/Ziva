#!/usr/bin/env groovy

pipeline {
    agent none
    options {
        skipDefaultCheckout true
        timestamps()
        timeout(time: 2, unit: 'HOURS') // long in case it needs to wait for machines
    }
    stages {
        stage('get sources') {
            agent { label 'git' && 'linux' }  // must checkout to a linux machine to avoid line ending issue
            steps {
                echo 'running checkout ziva-vfx-utils stage'

                dir('ziva-vfx-utils') {
                    script {
                        scmVars = checkout scm
                    }
                }
                stash(name: 'main', includes: 'ziva-vfx-utils/**')
                stash(name: 'tools', includes: 'ziva-vfx-utils/tests/CmtTests/bitbucket-notify.py')
            }
            post {
                cleanup { cleanWs() } 
            }
        }
        stage('run tests for ziva-vfx-utils') {
            failFast true
            parallel {
                stage('windows') {
                    agent { label 'windows && vfx' }
                    environment {
                        mayaVersion = "2018" // variations: 2017, 2018, 2019, 2020
                    }
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            unstash 'main'
                            runWindowsTestStage()
                        }
                    }
                    post { cleanup { cleanWs() } }
                }

                stage('centos7') {
                    agent { label 'centos7 && vfx' }
                    environment {
                        mayaVersion = "2019"
                    }
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            unstash 'main'
                            runLinuxTestStage()
                        }
                    }
                    post { cleanup { cleanWs() } }
                }

                stage('centos6') {
                    agent { label 'centos6 && vfx' }
                    environment {
                        mayaVersion = "2017"
                    }
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            unstash 'main'
                            runLinuxTestStage()
                        }
                    }
                    post { cleanup { cleanWs() } }
                }

                stage('doc generation') {
                    agent { label 'centos7 && vfx' }
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            unstash 'main'
                            sh "ziva-vfx-utils/docs/build_the_docs.sh"
                        }
                    }
                    post { 
                        aborted {
                            node ('git' && 'linux') {
                                unstash 'tools'
                                withCredentials([usernamePassword( credentialsId: 'ziva-jenkins', usernameVariable: 'USR', passwordVariable: 'PWS' )]) {
                                    script {
                                        // Add and change build status need only for builds in AWS (Domain Name: zivadev.net).
                                        if (JENKINS_URL.contains('.net')){
                                            sh 'python ${WORKSPACE}/ziva-vfx-utils/tests/CmtTests/bitbucket-notify.py "Zoa" "FAILED" ' + scmVars.GIT_COMMIT + ' $BUILD_NUMBER $BUILD_URL ${USR} ${PWS}'
                                        }
                                    }
                                }
                            }
                        }
                        unsuccessful {
                            node ('git' && 'linux') {
                                unstash 'tools'
                                withCredentials([usernamePassword( credentialsId: 'ziva-jenkins', usernameVariable: 'USR', passwordVariable: 'PWS' )]) {
                                    script {
                                        // Add and change build status need only for builds in AWS (Domain Name: zivadev.net).
                                        if (JENKINS_URL.contains('.net')){
                                            sh 'python ${WORKSPACE}/ziva-vfx-utils/tests/CmtTests/bitbucket-notify.py "Zoa" "FAILED" ' + scmVars.GIT_COMMIT + ' $BUILD_NUMBER $BUILD_URL ${USR} ${PWS}'
                                        }
                                    }
                                }
                            }
                        }
                        success {
                            node ('git' && 'linux') {
                                unstash 'tools'
                                withCredentials([usernamePassword( credentialsId: 'ziva-jenkins', usernameVariable: 'USR', passwordVariable: 'PWS' )]) {
                                    script {
                                        // Add and change build status need only for builds in AWS (Domain Name: zivadev.net).
                                        if (JENKINS_URL.contains('.net')){
                                            sh 'python ${WORKSPACE}/ziva-vfx-utils/tests/CmtTests/bitbucket-notify.py "Zoa" "SUCCESSFUL" ' + scmVars.GIT_COMMIT + ' $BUILD_NUMBER $BUILD_URL ${USR} ${PWS}'
                                        } 
                                    }
                                }
                            }
                        }
                        cleanup { cleanWs() } 
                    }
                }
            }
        }
    }
}

def runWindowsTestStage() {
    echo "running windows test stage"

    environment {
        zivadyn_LICENSE="${env.zivadyn_LICENSE};C:\\ziva"
    }

    dir('ziva-vfx-utils') {
        bat "python tests/CmtTests/copy_plugin_zBuilder_tests.py --maya ${mayaVersion}"
        bat "python tests/CmtTests/run_zbuilder_tests.py --maya ${mayaVersion}"
    }
}

def runLinuxTestStage() {
    echo "running linux test stage"

    dir('ziva-vfx-utils') {
        withEnv([
          "zivadyn_LICENSE=${env.zivadyn_LICENSE}:/var/ziva"
        ]) {
            sh "python tests/CmtTests/copy_plugin_zBuilder_tests.py --maya ${mayaVersion}"
            sh "python tests/CmtTests/run_zbuilder_tests.py --maya ${mayaVersion}"
        }
    }
}
